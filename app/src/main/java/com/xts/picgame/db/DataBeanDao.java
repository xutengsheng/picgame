package com.xts.picgame.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xts.picgame.model.bean.DataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_BEAN".
*/
public class DataBeanDao extends AbstractDao<DataBean, String> {

    public static final String TABLENAME = "DATA_BEAN";

    /**
     * Properties of entity DataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "URL");
        public final static Property Imageid = new Property(1, int.class, "imageid", false, "IMAGEID");
        public final static Property Typeid = new Property(2, int.class, "typeid", false, "TYPEID");
        public final static Property Mname = new Property(3, String.class, "mname", false, "MNAME");
        public final static Property Imgtime = new Property(4, String.class, "imgtime", false, "IMGTIME");
        public final static Property Tname = new Property(5, String.class, "tname", false, "TNAME");
        public final static Property Music = new Property(6, String.class, "music", false, "MUSIC");
        public final static Property Identify = new Property(7, boolean.class, "identify", false, "IDENTIFY");
        public final static Property Expressive = new Property(8, boolean.class, "expressive", false, "EXPRESSIVE");
        public final static Property Match = new Property(9, boolean.class, "match", false, "MATCH");
        public final static Property Similar = new Property(10, boolean.class, "similar", false, "SIMILAR");
        public final static Property Sort = new Property(11, boolean.class, "sort", false, "SORT");
        public final static Property Receptive = new Property(12, boolean.class, "receptive", false, "RECEPTIVE");
    }


    public DataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_BEAN\" (" + //
                "\"URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: url
                "\"IMAGEID\" INTEGER NOT NULL ," + // 1: imageid
                "\"TYPEID\" INTEGER NOT NULL ," + // 2: typeid
                "\"MNAME\" TEXT," + // 3: mname
                "\"IMGTIME\" TEXT," + // 4: imgtime
                "\"TNAME\" TEXT," + // 5: tname
                "\"MUSIC\" TEXT," + // 6: music
                "\"IDENTIFY\" INTEGER NOT NULL ," + // 7: identify
                "\"EXPRESSIVE\" INTEGER NOT NULL ," + // 8: expressive
                "\"MATCH\" INTEGER NOT NULL ," + // 9: match
                "\"SIMILAR\" INTEGER NOT NULL ," + // 10: similar
                "\"SORT\" INTEGER NOT NULL ," + // 11: sort
                "\"RECEPTIVE\" INTEGER NOT NULL );"); // 12: receptive
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataBean entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
        stmt.bindLong(2, entity.getImageid());
        stmt.bindLong(3, entity.getTypeid());
 
        String mname = entity.getMname();
        if (mname != null) {
            stmt.bindString(4, mname);
        }
 
        String imgtime = entity.getImgtime();
        if (imgtime != null) {
            stmt.bindString(5, imgtime);
        }
 
        String tname = entity.getTname();
        if (tname != null) {
            stmt.bindString(6, tname);
        }
 
        String music = entity.getMusic();
        if (music != null) {
            stmt.bindString(7, music);
        }
        stmt.bindLong(8, entity.getIdentify() ? 1L: 0L);
        stmt.bindLong(9, entity.getExpressive() ? 1L: 0L);
        stmt.bindLong(10, entity.getMatch() ? 1L: 0L);
        stmt.bindLong(11, entity.getSimilar() ? 1L: 0L);
        stmt.bindLong(12, entity.getSort() ? 1L: 0L);
        stmt.bindLong(13, entity.getReceptive() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataBean entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
        stmt.bindLong(2, entity.getImageid());
        stmt.bindLong(3, entity.getTypeid());
 
        String mname = entity.getMname();
        if (mname != null) {
            stmt.bindString(4, mname);
        }
 
        String imgtime = entity.getImgtime();
        if (imgtime != null) {
            stmt.bindString(5, imgtime);
        }
 
        String tname = entity.getTname();
        if (tname != null) {
            stmt.bindString(6, tname);
        }
 
        String music = entity.getMusic();
        if (music != null) {
            stmt.bindString(7, music);
        }
        stmt.bindLong(8, entity.getIdentify() ? 1L: 0L);
        stmt.bindLong(9, entity.getExpressive() ? 1L: 0L);
        stmt.bindLong(10, entity.getMatch() ? 1L: 0L);
        stmt.bindLong(11, entity.getSimilar() ? 1L: 0L);
        stmt.bindLong(12, entity.getSort() ? 1L: 0L);
        stmt.bindLong(13, entity.getReceptive() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DataBean readEntity(Cursor cursor, int offset) {
        DataBean entity = new DataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.getInt(offset + 1), // imageid
            cursor.getInt(offset + 2), // typeid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imgtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // music
            cursor.getShort(offset + 7) != 0, // identify
            cursor.getShort(offset + 8) != 0, // expressive
            cursor.getShort(offset + 9) != 0, // match
            cursor.getShort(offset + 10) != 0, // similar
            cursor.getShort(offset + 11) != 0, // sort
            cursor.getShort(offset + 12) != 0 // receptive
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataBean entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImageid(cursor.getInt(offset + 1));
        entity.setTypeid(cursor.getInt(offset + 2));
        entity.setMname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMusic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdentify(cursor.getShort(offset + 7) != 0);
        entity.setExpressive(cursor.getShort(offset + 8) != 0);
        entity.setMatch(cursor.getShort(offset + 9) != 0);
        entity.setSimilar(cursor.getShort(offset + 10) != 0);
        entity.setSort(cursor.getShort(offset + 11) != 0);
        entity.setReceptive(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(DataBean entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(DataBean entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataBean entity) {
        return entity.getUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
